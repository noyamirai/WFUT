async function getPageContent(n){n=await fetch(n,{method:"GET",headers:{Accept:"text/html"}}),console.log("FETCHED"),n=await n.text();return(new DOMParser).parseFromString(n,"text/html").body.innerHTML}function isBackNavigation(n){return"push"!==n.navigationType&&"replace"!==n.navigationType&&-1!==n.destination.index&&n.destination.index<navigation.currentEntry.index}async function onLinkNavigate(a){navigation.addEventListener("navigate",n=>{const t=new URL(n.destination.url);if(location.origin===t.origin){const e=location.pathname,i=isBackNavigation(n);n.intercept({async handler(){"ignore"!==n.info&&await a({toPath:t.pathname,fromPath:e,isBack:i})}})}})}function getLink(n){const t=new URL(n,location.href).href;return[...document.querySelectorAll("a")].find(n=>n.href===t)}function transitionHelper({skipTransition:n=!1,classNames:t="",updateDOM:e}){if(n||!document.startViewTransition)return n=Promise.resolve(e()).then(()=>{}),{ready:Promise.reject(Error("View transitions unsupported")),domUpdated:n,updateCallbackDone:n,finished:n};const i=t.split(/\s+/g).filter(Boolean);document.documentElement.classList.add(...i);n=document.startViewTransition(e);return n.finished.finally(()=>document.documentElement.classList.remove(...i)),n}export{getPageContent,onLinkNavigate,getLink,transitionHelper};